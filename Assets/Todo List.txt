/* TODO LIST */
High Prio:
	- Make the JobSystem use a threadpool
	- Optimize the JobSystem
	- Make the ChunkGenerator code use the JobSystem
	- Create a "TileSerializer", which is a monobehaviour that allows the user to define every tile type. This class should also initialize and set the TileManager singleton.
	- Create a "TileManager" singleton which holds an array of "Tile". 
	- Make each chunk keep track of an array of "ChunkTile", a struct which holds the type and height of a tile on the chunk.
	- Create a "GetChunkTile(int x, int y)" method which return the ChunkTile located at the input coordinates
	- Create a "SetChunkTile(int x, int y, ChunkTile inChunkTile)" method which allows the user to modify the terrain


Med Prio:
	- Create a tool to preview noise maps
	- Spawn in different types of trees
	- Add in super basic inventory
	- Add in the ability to cut down trees and mine stones
	- Add the ability to modify the terrain
	- Add in ability to build campfire and small shelter
	
Low Prio:
	- Make each tile have its own tile type
	- Add save to disk / Load from disk
	- Implement thermal erosion
	- Implement hydraulic eriosion
	- Make Regenerate work with Chunk Objects
	- Create a few more interesting biomes using the BiomeManager
	- Create a better system for spawning chunk objects
	


Random thoughts:

* I need to store all the chunks linearly in memory as value types. In the World class, I could use an array of chunks which is generated when the game starts. This keeps the allocated memory compact. The size of this array should be (render distance * 2) so that a full set of chunks can be generated while the old are "destroyed".

* A chunk should have an array of _ChunkTile_ which holds a tiles Tile.Type and Height. If the properties of a Tile is needed, it can be accessed via "TileManager.instance.GetTileProperties(tileType)". The same goes for if flags are needed.

* The chunk should have methods such as "SetTileType(x, y, inTileType)" and "SetTileHeight(x, y, inNewHeight)". These methods should be thread safe and only modify the array of _ChunkTile_. After they have modified the TileData, they should put the ID of the tile modified tile into a "int[] modifiedTiles". They should also enable a "bool hasBeenModified" which on the main thread fires off a method which determines which tiles has been modified, and modifies the data of the chunk mesh accordingly.


// Contains the definition of a tile in the game and what properties it has
struct Tile
{
	// Each different tile should have a unique Type
	enum Type
	{
		Grass,
		Stone,
		Sand
	}
	readonly Type type;

	struct Properties
	{
		float moveSpeedMultiplier;
		float moveStaminaDrainMultiplier;
	}
	readonly Properties properties;
}

// The data of a tile a Chunk need to keep track of
struct ChunkTile
{
	Tile.Type tileType;
	int height;
}

// Has one of each tile, rather than storing the tile properties in whatever is using the tile, just store it here in one place
class TileManager
{
	Tile.Properties GetTileProperties(Tile.Type inTileType)
	{
		//...
	}


}





// JobManager.instance.DoThreaded(ThrededMethod, CallbackMethod);